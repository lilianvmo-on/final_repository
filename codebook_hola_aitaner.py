# -*- coding: utf-8 -*-
#"""CODEBOOK_Hola_Aitaner.ipynb

#Automatically generated by Colab.

#Original file is located at
#    https://colab.research.google.com/drive/1lImls65Dr-S0CsO9PnQ0R2vDXr35DPgC

# ¡Hola, Aitaner!

#---
#Lilian Venegas Torres


import streamlit as st
### Importamos pandas para analizar datos
import pandas as pd
from IPython.display import display_html
from IPython.display import YouTubeVideo
import seaborn as sns
import matplotlib.pyplot as plt

#Para abrir el archivo de nuestra base de datos
#from google.colab import files
#uploaded = files.upload()

# Asignamos una variable al archivo
# Usamos pd.read_excel por que es un archivo excel

# Lee el archivo Excel (asegúrate de que el nombre del archivo sea correcto)
basedatos = pd.read_excel('aitana_base_datos.xlsx')

# Para ver la base de datos
#basedatos

paginas = ['Inicio', 'Youtube', 'Spotify', 'Instagram']
pagina_seleccionada = st.sidebar.selectbox('Selecciona una página', paginas)

#Para buscador en pantalla principal (Buscador de álbumes)
#from IPython.display import display_html
#usamos función display_html para insertar HTML puro directamente en la salida de una celda ()
#Para procesar imágenes (url_álbum)

if pagina_seleccionada == 'Inicio':
    st.image("bannerinicio.png", width=600)
       
    texto = """presentación artista
    Aquí escribe una presentación creativa sobre ti.
    ¿Quién eres?, 
    ¿De dónde eres?, 
    ¿Qué estudias?, 
    ¿Qué te gusta de tu carrera?, 
    ¿Qué te gustaría hacer en el futuro?, 
    ¿Qué te gusta hacer en tu tiempo libre?
    """
    st.markdown(f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>", unsafe_allow_html=True)


#Solicitamos al usuario ingresar el nombre
    st.markdown("<h1 style='text-align: center;'>Búsqueda de álbum</h1>", unsafe_allow_html=True)

    busqueda_principal = st.text_input("¿Interesadx en algún álbum de Aitana? Ingresa el nombre aquí:")

    if busqueda_principal:
        albumes_coincidentes = basedatos[
            basedatos['album'].str.lower().str.contains(busqueda_principal.lower())
        ]

        if not albumes_coincidentes.empty:
            encontrado = True
            for album in albumes_coincidentes['album'].unique():
                canciones_album = albumes_coincidentes[
                    albumes_coincidentes['album'] == album
                ]

                st.image(
                    canciones_album.iloc[0]["url_album"],
                    width=200,
                    caption=f"Portada del álbum: {album}",
                )
                st.markdown(f"### 🎼 Álbum: {album}")
                st.write("**Canciones:**")
                for _, cancion in canciones_album.iterrows():
                    st.write(f"- {cancion['nombre_canciones']}")
        else:
            st.warning("No se encontraron álbumes que coincidan con tu búsqueda.")

    # --- Búsqueda por canción ---

    st.markdown("<h1 style='text-align: center;'>Búsqueda de canción</h1>", unsafe_allow_html=True)

    busqueda_cancion = st.text_input("¡Escuchemos a Aitana! Ingresa el nombre de una canción:")

    if busqueda_cancion:
        resultados = basedatos[
            basedatos['nombre_canciones'].str.lower().str.contains(busqueda_cancion.lower())
        ]

        if not resultados.empty:
            for _, fila in resultados.iterrows():
                cancion = fila['nombre_canciones']
                album = fila['album']
                letra = fila['letra']
                url_youtube = fila['link_video']

                st.markdown(f"## 🎵 {cancion}")
                st.markdown(f"**💿 Álbum:** {album}")
                st.markdown("**📝 Letra:**")
                st.write(letra)

                if url_youtube:
                    st.video(url_youtube)
                else:
                    st.info("No se pudo mostrar el video.")
        else:
            st.warning("No se encontró ninguna canción con ese nombre.")

elif  pagina_seleccionada == 'Youtube':


    st.markdown("<h1 style='text-align: center;'>Rankings de canciones de Aitana en Youtube</h1>", unsafe_allow_html=True)

    opcion = st.selectbox(
        "Selecciona un ranking para ver el Top 15:",
        ["Likes", "Visualizaciones", "Comentarios"]
    )

    if opcion == "Likes":
        st.subheader("👍 Top 15 canciones con más likes en YouTube")
        ranking_likesyt = basedatos.sort_values(by='likes_yt', ascending=False)
        top15_likesyt = ranking_likesyt.head(15)
        st.dataframe(top15_likesyt[['nombre_canciones', 'album', 'likes_yt']])

    elif opcion == "Visualizaciones":
        st.subheader("👀 Top 15 canciones con más visualizaciones en YouTube")
        ranking_vistasyt = basedatos.sort_values(by='vistas_yt', ascending=False)
        top15_vistasyt = ranking_vistasyt.head(15)
        st.dataframe(top15_vistasyt[['nombre_canciones', 'album', 'vistas_yt']])

    elif opcion == "Comentarios":
        st.subheader("💬 Top 15 canciones con más comentarios en YouTube")
        ranking_commentsyt = basedatos.sort_values(by='comentarios_yt', ascending=False)
        top15_comentariosyt = ranking_commentsyt.head(15)
        st.dataframe(top15_comentariosyt[['nombre_canciones', 'album', 'comentarios_yt']])



   
   


elif  pagina_seleccionada == 'Spotify':
    st.header("📈 Top 3 canciones más reproducidas por Álbum en Spotify")

    # Lista de álbumes únicos
    albumes_unicos = basedatos['album'].dropna().unique()
    album_seleccionado = st.selectbox("🎵 Selecciona un álbum", sorted(albumes_unicos))

    # Filtrar DataFrame por álbum
    grupo_album = basedatos[basedatos['album'] == album_seleccionado]

    # Obtener portada
    portada_url = grupo_album['url_album'].iloc[0]
    st.image(portada_url, caption=f"Portada del álbum: {album_seleccionado}", width=300)

    # Top 3 canciones más reproducidas
    top3 = grupo_album.sort_values(by='reproduciones_spotify', ascending=False).head(3)

    # Mostrar tabla
    st.subheader("🎧 Top 3 canciones")
    st.dataframe(top3[['nombre_canciones', 'reproduciones_spotify']].reset_index(drop=True))

    # Crear gráfico con seaborn
    plt.figure(figsize=(8, 5))
    sns.barplot(
        data=top3,
        x='reproduciones_spotify',
        y='nombre_canciones',
        palette='Blues_d'
    )
    plt.xlabel("Reproducciones en Spotify")
    plt.ylabel("Canción")
    plt.title(f"Top 3 - {album_seleccionado}")
    plt.tight_layout()

    # Mostrar gráfico en Streamlit
    st.pyplot(plt)


else:

    st.header("📱 Impacto de los posts promocionales en Instagram")

    # Crear columna de interacción
    basedatos['interaccion_total'] = basedatos['numlikes_ig'] + basedatos['numcomentarios_ig']

    # Mostrar el ranking de los 10 posts con más interacción
    top_instagram = basedatos.sort_values(by='interaccion_total', ascending=False).head(10)

    st.subheader("Top 10 publicaciones con mayor impacto")
    for i, row in top_instagram.iterrows():
        st.markdown(f"**Post relacionado con:** {row['nombre_canciones']}")
        st.write(f" Likes: {row['numlikes_ig']} |  Comentarios: {row['numcomentarios_ig']}")
        st.markdown(f"[ Ver post en Instagram]({row['post_instagram']})", unsafe_allow_html=True)
        st.markdown("---")