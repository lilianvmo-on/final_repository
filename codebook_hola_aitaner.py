
# ¬°Hola, Aitaner!
# Autora: Lilian Venegas Torres (20232102)

# Este proyecto busca  es una p√°gina interactiva que muestra datos sobre la popularidad y relevancia de √°lbumes y canciones de la cantante Aitana en plataformas como YouTube, Spotify e Instagram 
# Los datos empleados fueron recopilados hasta (Junio de 2025*)

#Base de datos: https://docs.google.com/spreadsheets/d/1ayqWyBe5T1cvJ6DKzNkxDhoJKBccw7mXGffqSTfDx6Y/edit?usp=sharing


#ESTRUCTURA
#Importamos librer√≠as importantes para 
import streamlit as st #Streamlit para la creaci√≥n de la p√°gina
import pandas as pd #Para la manipulaci√≥n de datos 
from IPython.display import display_html #para la procesar im√°genes en HTML
from IPython.display import YouTubeVideo #para la visualizaci√≥n de videos de youtube
import seaborn as sns #Para gr√°ficos/visualizaciones
import matplotlib.pyplot as plt #Para gr√°ficos/visualizaciones
from matplotlib.ticker import FuncFormatter #para establecer una numeraci√≥n amigable en gr√°fica


# Para abrir y leer el archivo Excel (base de datos)
# Asignamos una variable al archivo
# Usamos pd.read_excel por que es un archivo excel
basedatos = pd.read_excel('aitana_base_datos.xlsx')

#Dividimos la p√°gina de Streamlit en secciones
paginas = ['Inicio', 'Youtube', 'Spotify', 'Instagram', '¬øCantamos?']
#Creamos una barra de selecci√≥n lateral, para que el usuario elija una secci√≥n
pagina_seleccionada = st.sidebar.selectbox('Bienvenido, Aitaner', paginas)



#Ingresamos una estructura if-elif-else, que responder√° a la elecci√≥n del usuario a parir de la barra de selecci√≥n/selectbox

##P√ÅGINA DE "INICIO"
#En caso el usuario selecciones "Inicio" se ejecutar√° la siguiente secci√≥n:
if pagina_seleccionada == 'Inicio':
    # Para mostrar banner superior, st.image
    st.image("banner_hola_aitaner.png", width=900)

    #st.markdown para agregar una peque√±a descripci√≥n del proyecto, en letras peque√±as
    st.markdown(
            f"<div style='text-align: justify; font-size: 11px;'>{"*Datos recopilados hasta el 30 de junio de 2025"}</div>",
            unsafe_allow_html=True)

    # Para mostrar un t√≠tulo, st.markdown
    st.markdown("<h1 style='text-align: left;'>Sobre Aitana...</h1>", unsafe_allow_html=True)


    # Creamos dos columnas para organizar contenido con st.columns
    col1, col2 = st.columns([2, 1]) 

    #Definimos contenido de primera columna
    with col1:
        #Ingresamos una variable (texto) y asignamos el texto que se quiere mostrar (descripci√≥n de artista)
        texto = """
        Aitana es una de las artistas pop m√°s influyentes de la escena musical actual en Espa√±a y Latinoam√©rica. Salt√≥ a la fama con su participaci√≥n en Operaci√≥n Triunfo (Edici√≥n 2017). Desde all√≠, su carrera ha sido un recorrido que refleja su talento, carisma y una evoluci√≥n art√≠stica constante. 
            Con √©xitos como ‚ÄúLo Malo‚Äù, ‚ÄúTel√©fono‚Äù y ‚ÄúFormentera‚Äù, ha alcanzado m√∫ltiples discos de platino y millones de reproducciones en plataformas digitales.
            Con cuatro √°lbumes de estudio y una banda sonora (Spoiler, 11 RAZONES, La √öltima, alpha, CUARTO AZUL), Aitana ha explorado sonidos que van del pop cl√°sico al electropop m√°s moderno. Adem√°s de su carrera musical, ha protagonizado series, documentales y ha sido reconocida con premios como el MTV EMA, los Premios Ode√≥n y nominaciones a los Latin Grammy. Aitana no solo canta: crea tendencia, conecta con su generaci√≥n y emociona con cada paso.
        """
        #Para mostrar el texto en la columna, st.markdown. Contiene la variable que se ejecuta e imprime su contenido
        #Texto justificado, tama√±o 15px
        st.markdown(
            f"<div style='text-align: justify; font-size: 15px;'>{texto}</div>",
            unsafe_allow_html=True
        )

    #Definimos contenido de segunda columna
    with col2:
        #Usamos st.image para mostrar imagen a partir de un link (contenido HTML)
        #"caption" para string a modo de descripci√≥n de imagen
        st.image(
        "https://hips.hearstapps.com/hmg-prod/images/sb-hb-aitana-001-1632818812.jpg?resize=980:*",
        caption="Aitana Oca√±a",
        use_container_width=True
        )

    #T√≠tulo para separar una nueva secci√≥n con st.markdown
    #T√≠tulo de buscador
    st.markdown("<h1 style='text-align: center;'>¬øEmpezamos con un √Ålbum?üíø</h1>", unsafe_allow_html=True)
    
    #Creamos variable para b√∫squeda por √°lbum
    #st.texto_input para que el usuario pueda ingresar un texto de b√∫squeda
    busqueda_principal = st.text_input("üéµ Ingresa el nombre de un √°lbum aqu√≠:")

    #Estructura de control para la b√∫squeda 
    #if para evaluar el contenido de la variable "busqueda_principal", texto ingresado por usuario
    if busqueda_principal:

        #Definimos los nombres de √°lbum que puede elegir el usuario para obtener un resultado de b√∫squeda
        #columna 'album' de la base de datos con funciones str.lower(), str.contains() y .lower() 
        # para homogeneizar el contenido de la columna y definir mejor posibles valores

        albumes_coincidentes = basedatos[
            basedatos['album'].str.lower().str.contains(busqueda_principal.lower())
        ]

        #Estructura de control para asegurar la coincidencia de la b√∫squeda
        #not y .empty para asegurarnos de que se ha ingresado alg√∫n contenido (*no est√° vac√≠o)
        if not albumes_coincidentes.empty:
            # =True para se√±alar que s√≠ se ha ingresado un valor de b√∫squeda
            encontrado = True

            #for e in para iterar sobre valores la columna de la tabla/base de datos
            #.unique para definir los valores √∫nicos de la columna album

            for album in albumes_coincidentes['album'].unique():
                canciones_album = albumes_coincidentes[
                    albumes_coincidentes['album'] == album
                ]

                #st.image para mostrar imagen de √°lbum (columna url_album)
                ##caption para imprimir nombre de √°lbum como descripci√≥n de imagen
                st.image(
                    canciones_album.iloc[0]["url_album"],
                    width=200,
                    caption=f"Portada del √°lbum: {album}",
                )

                #st.markdown para imprimir el nombre de √°lgum
                st.markdown(f"### üéº √Ålbum: {album}")
                #st.write para i
                st.write("**Canciones:**")
                
                #for para iterar sobre valores de columna con nombres de canciones (que son parte del √°lbum buscado)
                for _, cancion in canciones_album.iterrows():

                    #st.write para imprimir el nombre de las canciones pertenecientes al √°lbum buscado
                    st.write(f"- {cancion['nombre_canciones']}")
        
        #Estructura else que se muestra si el usuario no ingresa un valor v√°lido
        else:
            #st.warning para imprimir el mensaje de error en la b√∫squeda
            st.warning("No se encontraron √°lbumes que coincidan con tu b√∫squeda.")



## P√ÅGINA DE "YOUTUBE"
#En caso el usuario seleccione "Youtube" se ejecutar√° la siguiente secci√≥n:
elif pagina_seleccionada == 'Youtube':

    #T√≠tulo de la secci√≥n con st.markdown
    st.markdown("<h1 style='text-align: center;'>Rankings de canciones de Aitana en Youtube</h1>", unsafe_allow_html=True)

    #st.selectbox para agregar una barra de selecci√≥n que permita al usuario elegir qu√© ranking observar
    #Diccionario con posibles opciones de rankings a visualizar: Likes, Visualizaciones, Comentarios
    opcion = st.selectbox(
        "Selecciona un ranking para ver el Top 15:",
        ["Likes", "Visualizaciones", "Comentarios"]
    )

    #En caso el usuario elija la opci√≥n "Likes" del selectbox se ejecuta lo siguiente:
    if opcion == "Likes":
        #Subt√≠tulo con el nombre del ranking que se visualiza (likes en Youtube)
        st.subheader("üëç Top 15 canciones con m√°s likes en YouTube")

        #Ordenamos la base de datos en base a valores de columna likes_yt en orden descendente
        ranking_likesyt = basedatos.sort_values(by='likes_yt', ascending=False)
        #Tomamos los primeros 15 valores con head(15) a partir del ordenamiento
        #.reset_index para mostrar una numeraci√≥n a partir del orden 
        top15 = ranking_likesyt.head(15).reset_index(drop=True)
       
        # Insertamos una nueva columna al principio del DataFrame llamada "#"
        # Esta columna numera las canciones del 1 al 15
        top15.insert(0, "#", range(1, len(top15)+1))
        # Seleccionamos solo las columnas deseadas del dataframe general y cambiamos nombres de encabezados
        tabla = top15[['#', 'nombre_canciones', 'album', 'likes_yt']].rename(
            columns={
                'nombre_canciones': 'Canci√≥n',
                'album': '√Ålbum',
                'likes_yt': 'Likes'
            }
        )
        
        #Mostramos la tabla creada a partir de los filtros anteriores
        # hide_index=True oculta el √≠ndice adicional para que no aparezca una columna duplicada de n√∫meros
        st.dataframe(tabla, hide_index=True)

    #En caso el usuario elija la opci√≥n "Visualizaciones" del selectbox se ejecuta lo siguiente:
    elif opcion == "Visualizaciones":
        #Subt√≠tulo con el nombre del ranking que se visualiza (visualizaciones en Youtube)
        st.subheader("üëÄ Top 15 canciones con m√°s visualizaciones en YouTube")

        #Ordenamos la base de datos en base a valores de columna vistas_yt en orden descendente
        ranking_vistasyt = basedatos.sort_values(by='vistas_yt', ascending=False)
        #Tomamos los primeros 15 valores con head(15) a partir del ordenamiento
        #.reset_index para mostrar una numeraci√≥n a partir del orden 
        top15 = ranking_vistasyt.head(15).reset_index(drop=True)

        # Insertamos una nueva columna al principio del DataFrame llamada "#"
        # Esta columna numera las canciones del 1 al 15
        top15.insert(0, "#", range(1, len(top15)+1))
        # Seleccionamos solo las columnas deseadas del dataframe general y cambiamos nombres de encabezados
        tabla = top15[['#', 'nombre_canciones', 'album', 'vistas_yt']].rename(
            columns={
                'nombre_canciones': 'Canci√≥n',
                'album': '√Ålbum',
                'vistas_yt': 'Visualizaciones'
            }
        )
        
        #Mostramos la tabla creada a partir de los filtros anteriores
        # hide_index=True oculta el √≠ndice adicional para que no aparezca una columna duplicada de n√∫meros
        st.dataframe(tabla, hide_index=True)

    #En caso el usuario elija la opci√≥n "Visualizaciones" del selectbox se ejecuta lo siguiente:
    elif opcion == "Comentarios":
        #Subt√≠tulo con el nombre del ranking que se visualiza (comentarios en Youtube)
        st.subheader("üí¨ Top 15 canciones con m√°s comentarios en YouTube")

        #Ordenamos la base de datos en base a valores de columna comentarios_yt en orden descendente
        ranking_commentsyt = basedatos.sort_values(by='comentarios_yt', ascending=False)
        #Tomamos los primeros 15 valores con head(15) a partir del ordenamiento
        #.reset_index para mostrar una numeraci√≥n a partir del orden 
        top15 = ranking_commentsyt.head(15).reset_index(drop=True)

        # Insertamos una nueva columna al principio del DataFrame llamada "#"
        # Esta columna numera las canciones del 1 al 15
        top15.insert(0, "#", range(1, len(top15)+1))
        # Seleccionamos solo las columnas deseadas del dataframe general y cambiamos nombres de encabezados
        tabla = top15[['#', 'nombre_canciones', 'album', 'comentarios_yt']].rename(
            columns={
                'nombre_canciones': 'Canci√≥n',
                'album': '√Ålbum',
                'comentarios_yt': 'Comentarios'
            }
        )

        #Mostramos la tabla creada a partir de los filtros anteriores
        # hide_index=True oculta el √≠ndice adicional para que no aparezca una columna duplicada de n√∫meros
        st.dataframe(tabla, hide_index=True)

    #Se agrega una imagen para mostrar al cierre de la secci√≥n  
    st.image("https://d21tucfpen3j82.cloudfront.net/wp-content/uploads/2025/01/24172641/Aitana-SegundoIntento.jpg", width=900)

   
##P√ÅGINA DE "SPOTIFY"
#En caso el usuario seleccione "Spotify" se ejecutar√° la siguiente secci√≥n: 
elif pagina_seleccionada == 'Spotify':
    # Para el t√≠tulo de la secci√≥n usamos st.markdown
    st.markdown("<h1 style='text-align: center;'>Rankings de canciones de Aitana en Spotify üéµ</h1>", unsafe_allow_html=True)

    st.subheader("üìà Top 3 canciones m√°s reproducidas por √°lbum")
    # .unique() para definir lista con nombres de los √°lbumes (nombres como valores √∫nicos)
    albumes_unicos = basedatos['album'].unique()

    #Creamos una barra de selecci√≥n/selectbox para que el usuario seleccione √°lbum
    #Usamos variable albumes_unicos para mostrar opciones disponibles
    album_seleccionado = st.selectbox(
        "üéµ Selecciona un √°lbum", 
        sorted(albumes_unicos)
    )

    #Filtramos DataFrame, base de datos, por √°lbum seleccionado
    grupo_album = basedatos[basedatos['album'] == album_seleccionado]

    #Obtenmos el URL de portada del √°lbum de la columna url_album
    portada_url = grupo_album['url_album'].iloc[0]

    #Tomamos las Top 3 canciones m√°s reproducidas
    #Ordenamos los valores del dataframe con .sort_values en orden descendente
    #Elegimos los primeros 3 valores del dataframe despu√©s del ordenamiento con .head(3)
    top3 = grupo_album.sort_values(
        by='reproduciones_spotify',
        ascending=False
    ).head(3)

    #Renombramos las columnas para un acabado m√°s limpio con .rename()
    #Usamos .reset_index() para resetear los √≠ndices de las canciones en el dataframe
    tabla_top3 = top3[['nombre_canciones', 'reproduciones_spotify']].rename(
        columns={
            'nombre_canciones': 'Canci√≥n',
            'reproduciones_spotify': 'Reproducciones'
        }
    ).reset_index(drop=True)

    #.index+1 para que el √≠ndice reseteado inicie en 1
    tabla_top3.index = tabla_top3.index + 1

    #Creamos dos columnas para ordenar el contenido de la secci√≥n
    col1, col2 = st.columns([1, 2])  #Proporci√≥n m√°s angosta para primera columna

    #Definimos contenido de primera columna (imagen de portada de √°lbum)
    with col1:
        #Mostramos imagen con st.image
        #A√±adimos descripci√≥n a imagen en caption=
        st.image(
            portada_url, 
            caption=f"Portada del √°lbum: {album_seleccionado}", 
            width=200
        )

    #Definimos contenido de segunda columna (tabla de ranking)
    with col2:
        #A√±adimos un subt√≠tulo para denominar la tabla
        st.subheader("üéß Top 3 canciones")
        #Mostramos el dataframe filtrado (tabla_top3)
        st.dataframe(
            tabla_top3,
            use_container_width=True
        )

    # A√±adimos gr√°fica con seaborn
    # Creamos una nueva columna a la base de dato general con reproducciones en millones
    top3_plot = top3.copy()
    top3_plot['reproduc_millones'] = top3_plot['reproduciones_spotify'] / 1_000_000

    #Configuramos la gr√°fica realizada con seaborn
    fig, ax = plt.subplots(figsize=(8, 5))

    #Definimos el contenido del gr√°fico de barras
    sns.barplot(
            data=top3_plot,
            x='reproduc_millones', #n√∫mero de reproducciones a partir de la nueva columna generada
            y='nombre_canciones', #nombre de cada canci√≥n perteneciente al top3 del √°lbum
            palette='Blues_d', #colores elegidos (azules)
            ax=ax    #especificamos el eje sobre el que se dibuja
        )

    #Definimos etiquetas y t√≠tulo, que ir√°n cambiando de acuerdo al album seleccionado
    ax.set_xlabel("Reproducciones en Spotify (millones)", fontsize=12)
    ax.set_ylabel("Canci√≥n", fontsize=12)
    ax.set_title(f"Top 3 - {album_seleccionado}", fontsize=14, fontweight='bold')

    #Formateamos eje x para mostrar n√∫mero de reproducciones en millones (como: 1.2M, 3.8M, etc.)
    ax.xaxis.set_major_formatter(
            FuncFormatter(lambda x, _: f"{x:.1f}M")
        )

    #Mostramos los valores num√©ricos junto a cada barra
    for i, v in enumerate(top3_plot['reproduc_millones']):
         ax.text(
                v, # Posici√≥n del texto con respecto al eje x
                i, # Posici√≥n del texto con respecto al eje y(√≠ndice de la canci√≥n)
                f"{v:.1f}M", # Texto que se mostrar√° (formato millones)
                color='black',
                va='center',
                fontweight='bold'
            )
    #Ajustamos los m√°rgenes y distribuci√≥n del gr√°fico
    plt.tight_layout()

    #Mostramos la gr√°fica, debajo de la divisi√≥n en columnas
    st.pyplot(fig)



##P√ÅGINA DE "INSTAGRAM"
#En caso el usuario seleccione "Instagram" se ejecutar√° la siguiente secci√≥n: 
elif pagina_seleccionada == 'Instagram':

    #Creamos un t√≠tulo con st.markdowm para denominar la secci√≥n
    st.markdown("<h1 style='text-align: center;'>üì± Posts promocionales en Instagram</h1>", unsafe_allow_html=True)

    # Creamos columna de "interacci√≥n" que sume el n√∫mero de likes y el n√∫mero de comentarios
    basedatos['interaccion_total'] = (
        basedatos['numlikes_ig'] + basedatos['numcomentarios_ig']
    )

    #Generamos un dataframe tomando en cuenta los valores de la nueva columna generada
    # Ordenamos el data frame en funci√≥n a los valores de la columna interacci√≥n_total (Usamos .sort_values)
    #.head(10) para mostrar los primeros 10 valores a partir de este ordenamiento
    top_instagram = basedatos.sort_values(
        by='interaccion_total', ascending=False
    ).head(10)

    # Creamos una lista con urls de im√°genes que se mostrar√°n para acompa√±ar los 10 valores de resultado
    imagenes_manual = [
        "https://www.lahiguera.net/musicalia/artistas/aitana/disco/14086/tema/32431/aitana_6_de_febrero-portada.jpg",
        "https://cdn-images.dzcdn.net/images/cover/c880caa69be993971d92ad91826fa5bb/0x1900-000000-80-0-0.jpg",
        "https://www.lahiguera.net/musicalia/artistas/aitana/disco/10960/tema/22119/aitana_+_mas-portada.jpg",
        "https://hips.hearstapps.com/hmg-prod/images/aitana-natalia-lacunza-videoclip-1612864284.jpg",
        "https://www.lahiguera.net/musicalia/artistas/aitana/disco/9883/tema/20829/aitana_nada_sale_mal-portada.jpg",
        "https://www.lahiguera.net/musicalia/artistas/aitana/disco/12472/tema/26450/aitana_formentera-portada.jpg",
        "https://upload.wikimedia.org/wikipedia/en/e/e7/CorazonSinVidaCover.jpg",
        "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi93A__7E3G9mAS3riMZpBuHblz69tDI0pcry2Lsmvu_xa-1qgj1DNhAzHoNDvQqAN8XlHzz9JK4Tkg9Jy1isZGUkvOD2iybRaux6yu3iTtzq-kmURZDdGZcbTQcun4R8-yu7Tl87h1OC6koC8tFCKDq828lVQXFAG8xibi1Ddd5KV1iugSzijNZhrR1Ak/s831/aitana1.jpg",
        "https://cdn-images.dzcdn.net/images/cover/57432b0105261abfe8c1e486f4d0de45/500x500.jpg",
        "https://image.europafm.com/clipping/cmsimages02/2023/03/04/BA70DAB2-8C49-4D04-8920-0BB06ED912B8/mas-que-album-todo-que-sabe-alpha-nuevo-disco-aitana-que-saldra-2023_104.jpg?crop=368,368,x144,y0&width=1200&height=1200&optimize=low&format=webply",
    ]

    #Subt√≠tuo con st.subheader para darle una divisi√≥n a la secci√≥n
    st.subheader("üéØTop 10 publicaciones con mayor impacto")

    #Recorremos el DataFrame top_instagram para mostrar cada canci√≥n del top 10 con su respectiva data
    # .iterrows para iterar fila por fila sobre el dataframe top_instagram
    #Usamos enumerate para llevar el conteo (√≠ndice "i") y empezar la numeraci√≥n en 1.

    for i, (_, row) in enumerate(top_instagram.iterrows()):

        #Usamos una divisi√≥n en dos columnas
        col1, col2 = st.columns([2, 1])
        
        #Definimos contenido de primera columna (datos de publicaci√≥n)
        with col1:
            #Mostramos el nombre de la canci√≥n y su posici√≥n en el ranking
            #"i+1" para mostrar su n√∫mero en el ranking (+1 al √≠ndice)
            st.markdown(f"### {i+1}. üéµ **{row['nombre_canciones']}**")
            
            #Dividimos en 3 columnas para mostrar la data de cada publicaci√≥n de acuerdo a nuestra base de datos general
            c1, c2, c3 = st.columns([1, 1, 2])
            #Columna 1 para mostrar el n√∫mero de likes(mostramos su respectivo valor de la columna numlikes_ig de base de datos)
            c1.metric("‚ù§Ô∏è Likes (miles)", f"{row['numlikes_ig']:,}")
            #Columna 2 para mostrar el n√∫mero de comentarios(mostramos su respectivo valor de la columna numcomentarios_ig de base de datos)
            c2.metric("üí¨ Comentarios", f"{row['numcomentarios_ig']:,}")
            #Columna 3 para mostrar la interacci√≥n(mostramos su respectivo valor de la columna interaccion_total, creada previamente)
            c3.metric("‚ú® Total Interacci√≥n", f"{row['interaccion_total']:,}")
            
            #Creamos un texto enlazado con url para redirigir al usuario a la publicaci√≥n en Instagram
            st.markdown(
                f"[üëâüîó Mira el post en Instagram aqu√≠]({row['post_instagram']})",
                unsafe_allow_html=True
            )
        
        #Definimos contenido de segunda columna (im√°genes para acompa√±ar cada resultado del top10)
        #Luego de una previsualizaci√≥n del top10, se le asign√≥ a cada resultado una imagen referencial de la canci√≥n- 
        #  que el post de Instagram promociona a partir de la lista "imagenes_manual"
        with col2:
            imagen_url = imagenes_manual[i]
            st.image(imagen_url, use_container_width=True)
        
        st.markdown("---")



##P√ÅGINA DE "CANCIONES Y LETRAS"
#En caso el usuario seleccione "¬øCantamos?"(o "no seleccione" ninguna de las otras secciones) se ejecutar√° la siguiente secci√≥n :  
else:
    # Mostramos un t√≠tulo al centro de la secci√≥n    
    st.markdown("<h1 style='text-align: center;'>¬øListx para un karaoke?üé§</h1>", unsafe_allow_html=True)

    # Para el buscador de canciones, usamos st.text_input para permitir al usuario ingresar b√∫squeda
    # Se imprime peque√±o mensaje con isntrucci√≥n al usuario
    busqueda_cancion = st.text_input("¬°Canta los mejores hits de Aitana! ü§© -  üåàIngresa el nombre de una canci√≥n:")


    #Estructura de control para evaluar la b√∫squeda ingresada
    if busqueda_cancion:

        #Definimos valores de b√∫squeda posibles (nombres de canciones)
        #usamos str.lower(), str.contains() para homogeneizar el texto y definir mejor los posibles valores
        resultados = basedatos[
            basedatos['nombre_canciones'].str.lower().str.contains(busqueda_cancion.lower())
        ]

        #Constatamos de que se ha ingresado un valor (not y .empty)
        if not resultados.empty:
            #Iteramos sobre los posibles valores
            for _, fila in resultados.iterrows():
                
                #Definimos los contenidos de la base de datos que se mostrar√°n al usuario
                cancion = fila['nombre_canciones'] #para llamar a la columna con nombres de canciones
                album = fila['album'] #para llamar a la columna con los nombres de √°lbumes
                letra = fila['letra'] #para llamar a la columba con letras de cada canci√≥n
                url_youtube = fila['link_video'] #para llamar a columna con el link de video en youtube
                url_album_img = fila['url_album'] #para llamar a columna con url de imagen html de √°lbum

                # T√≠tulo de la canci√≥n y √°lbum con st.markdown
                st.markdown(f"## üéµ {cancion}")
                st.markdown(f"**üíø √Ålbum:** {album}")

                # Creamos las dos columnas con st.columns
                col1, col2 = st.columns([1.5,1.5]) 

                #Definimos contenido de columna 1
                with col1:
                    # Para imprimir letra de canciones en texto centrado, st.markdown
                    # Imprimimos un peque√±o t√≠tulo "üìùüé∂ Letra"
                    st.markdown(
                        f"""
                        <div style='text-align: center; font-size: 12px;'>
                            <h4>üìùüé∂ Letra:</h4>
                            <p>{letra.replace('\n', '<br>')}</p>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                #Definimos contenido de columna 2
                with col2:
                    
                    # Para mostar el video en youtube
                    if url_youtube:

                        # Extraemos el ID de YouTube para incrustar 
                        # (usamos funciones split y recorremos las palabras del url como string para s√≥lo seleccionar el ID)
                        def extraer_id_youtube(url):
                            if "youtu.be" in url:
                                return url.split("/")[-1].split("?")[0]
                            elif "watch?v=" in url:
                                return url.split("watch?v=")[-1].split("&")[0]
                            else:
                                return None
                        
                        # Con ID extra√≠do construimos estructura para incrustar video en la pagina
                        video_id = extraer_id_youtube(url_youtube)

                        #Estructura de control para emplear el id de la canci√≥n elegida
                        if video_id:
                            # Generamos iframe construyendo el link de inscrustaci√≥n
                            youtube_embed_url = f"https://www.youtube.com/embed/{video_id}"
                            
                            # st.markdown para imprimir el url e incrustar el video
                            st.markdown(
                                f"""
                                <iframe width="100%" height="200" src="{youtube_embed_url}" 
                                frameborder="0" allowfullscreen></iframe>
                                """,
                                unsafe_allow_html=True
                            )
                        
                        #En caso haya un problema con el id del video de la canci√≥n
                        else:
                            #Imprimimos mensaje alertando el problema con st.info
                           st.info("No se pudo mostrar el video.")
                    
                    # Para imprimir imagen del √°lbum
                    if url_album_img:
                        #Usamos st.image para emplear el url de imagen de √°lbum y un caption con la descripci√≥n 
                        st.image(
                            url_album_img,
                            caption=f"Portada de {album}üéµ",
                            use_container_width=True
                        )
        #En caso la b√∫squeda del usuario no est√© incluida en la base de datos
        else:
            #Se imprime mensaje de error con st.warning
            st.warning("No se encontr√≥ ninguna canci√≥n con ese nombre.")

    #Se agrega una imagen para mostrar al cierre de la secci√≥n
    st.image("https://lamaquinamedio.com/wp-content/uploads/2023/05/Aitana-concierto-en-Chile.jpg")