# -*- coding: utf-8 -*-
"""CODEBOOK_Hola_Aitaner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lImls65Dr-S0CsO9PnQ0R2vDXr35DPgC

# ¡Hola, Aitaner!

---
Lilian Venegas Torres
(descripción breve)

[texto del enlace](https://)
"""



### Importamos pandas para analizar datos
import pandas as pd

#Para abrir el archivo de nuestra base de datos
from google.colab import files
uploaded = files.upload()

# Asignamos una variable al archivo
# Usamos pd.read_excel por que es un archivo excel

# Lee el archivo Excel (asegúrate de que el nombre del archivo sea correcto)
basedatos = pd.read_excel('AITANA BASE DE DATOS (1).xlsx')

# Para ver la base de datos
basedatos

#Para buscador en pantalla principal (Buscador de álbumes)
from IPython.display import display_html
#usamos función display_html para insertar HTML puro directamente en la salida de una celda ()
#Para procesar imágenes (url_álbum)

#Solicitamos al usuario ingresar el nombre
busqueda_principal = input("¿Interesadx en algún álbum de Aitana? Ingresa el nombre aquí: ").lower()

#Filtramos álbumes que coincidan con la búsqueda (en minúsculas, valores únicos de la columna)
albumes_coincidentes = basedatos[basedatos['album'].str.lower().str.contains(busqueda_principal)]

#Variable para verificar si hay resultados
encontrado = False

#Verificamos si se encontraron resultados
if not albumes_coincidentes.empty:
    #Agrupamos las canciones a partir del álbum buscado
    for album in albumes_coincidentes['album'].unique():
        canciones_album = albumes_coincidentes[albumes_coincidentes['album'] == album]

        #Mostramos imagen del álbum emplenado la función display_html
        display_html(f'<img src="{canciones_album.iloc[0]["url_album"]}" width="200"style="margin-bottom: 20px;">', raw=True)
        print(f"\nNombre del álbum: {album}")

        #Mostramos canciones del álbum
        for _, cancion in canciones_album.iterrows():
            print(f"- {cancion['nombre_canciones']}")

#En caso el valor de la búsqueda no sea el nombre de un álbum
else:
    print("No se encontraron álbumes que coincidan con tu búsqueda.")

from IPython.display import YouTubeVideo

# Función para extraer el ID desde un enlace de YouTube
def extraer_id_youtube(url):
    if "youtu.be" in url:
        return url.split("/")[-1].split("?")[0]
    elif "watch?v=" in url:
        return url.split("watch?v=")[-1].split("&")[0]
    else:
        return None

# Búsqueda por nombre de canción
busqueda_cancion = input("¡Escuchemos a Aitana! Ingresa el nombre de una canción: ").lower()

# Filtrar canciones que coincidan
resultados = basedatos[basedatos['nombre_canciones'].str.lower().str.contains(busqueda_cancion)]

# Mostrar resultados
if not resultados.empty:
    for i, fila in resultados.iterrows():
        cancion = fila['nombre_canciones']
        album = fila['album']
        letra = fila['letra']
        url_youtube = fila['link_video']

        print(f"\n🎵 Canción: {cancion}")
        print(f"💿 Álbum: {album}\n")
        print("📝 Letra:\n")
        print(letra)

        # Mostrar el video
        video_id = extraer_id_youtube(url_youtube)
        if video_id:
            display(YouTubeVideo(video_id, width=560, height=315))
        else:
            print("No se pudo mostrar el video.")
else:
    print("No se encontró ninguna canción con ese nombre.")



#### RANKING CANCIONES AITANA EN YOUTUBE

#Visualizaciones en Youtube (15 videos más reproducidos)
ranking_vistasyt = basedatos.sort_values(by='vistas_yt', ascending=False)
top15_vistasyt = ranking_vistasyt.head(15)
print(top15_vistasyt[['nombre_canciones', 'album', 'vistas_yt']])

#Comentarios en Youtube (15 videos más comentados)
#Ordenamos todas las canciones de la base de datos en base a la cantidad de comentarios (orden descendente)
ranking_commentsyt = basedatos.sort_values(by='comentarios_yt', ascending=False)

#Tomamos en cuenta las primeras 15 canciones de la lista a partir del orden por cantidad de comentarios
top15_comentariosyt = ranking_commentsyt.head(15)
print(top15_comentariosyt[['nombre_canciones', 'album', 'comentarios_yt']])

#Likes en Youtube (15 videos más likeados)
ranking_likesyt = basedatos.sort_values(by='likes_yt', ascending=False)
top15_likesyt = ranking_likesyt.head(15)
print(top15_likesyt[['nombre_canciones', 'album', 'likes_yt']])

#import streamlit as st

#st.title("🎶 Rankings de canciones de Aitana en YouTube")

##Creamos el widget de selección
#opcion = st.selectbox("Selecciona un ranking:", ["Visualizaciones", "Comentarios", "Likes"]))

##Ranking por likes
#if opcion == "Likes":
    st.subheader("👍 Top 15 canciones con más likes en YouTube")
    ranking_likesyt = basedatos.sort_values(by='likes_yt', ascending=False)
    top15_likesyt = ranking_likesyt.head(15)
    st.dataframe(top15_likesyt[[['nombre_canciones', 'album', 'likes_yt']]])

##Ranking por vistas
#elif opcion == "Por vistas":
    st.subheader("👀 Top 15 canciones con más vistas en YouTube")
    ranking_vistasyt = basedatos.sort_values(by='vistas_yt', ascending=False)
    top15_vistasyt = ranking_vistasyt.head(15)
    st.dataframe(top15_vistasyt[[['nombre_canciones', 'album', 'vistas_yt']]])

##Ranking por comentarios
#elif opcion == "Por comentarios"
    st.subheader("💬 Top 15 canciones con más comentarios en YouTube")
    ranking_commentsyt = basedatos.sort_values(by='comentarios_yt', ascending=False)
    top15_comentariosyt = ranking_commentsyt.head(15)
    st.dataframe(top15_comentariosyt[[['nombre_canciones', 'album', 'comentarios_yt']]])



import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt


st.header("📈 Top 3 canciones más reproducidas por Álbum en Spotify")

# Lista de álbumes únicos
albumes_unicos = basedatos['album'].dropna().unique()
album_seleccionado = st.selectbox("🎵 Selecciona un álbum", sorted(albumes_unicos))

# Filtrar DataFrame por álbum
grupo_album = basedatos[basedatos['album'] == album_seleccionado]

# Obtener portada
portada_url = grupo_album['url_album'].iloc[0]
st.image(portada_url, caption=f"Portada del álbum: {album_seleccionado}", width=300)

# Top 3 canciones más reproducidas
top3 = grupo_album.sort_values(by='reproduciones_spotify', ascending=False).head(3)

# Mostrar tabla
st.subheader("🎧 Top 3 canciones")
st.dataframe(top3[['nombre_canciones', 'reproduciones_spotify']].reset_index(drop=True))

# Crear gráfico con seaborn
plt.figure(figsize=(8, 5))
sns.barplot(
    data=top3,
    x='reproduciones_spotify',
    y='nombre_canciones',
    palette='Blues_d'
)
plt.xlabel("Reproducciones en Spotify")
plt.ylabel("Canción")
plt.title(f"Top 3 - {album_seleccionado}")
plt.tight_layout()

# Mostrar gráfico en Streamlit
st.pyplot(plt)



st.header("📱 Impacto de los posts promocionales en Instagram")

# Crear columna de interacción
basedatos['interaccion_total'] = basedatos['likes_instagram'] + basedatos['comentarios_instagram']

# Mostrar el ranking de los 10 posts con más interacción
top_instagram = basedatos.sort_values(by='interaccion_total', ascending=False).head(10)

st.subheader("Top 10 publicaciones con mayor impacto")
for i, row in top_instagram.iterrows():
    st.markdown(f"**Post relacionado con:** {row['nombre_canciones']}")
    st.write(f" Likes: {row['likes_instagram']} |  Comentarios: {row['comentarios_instagram']}")
    st.markdown(f"[ Ver post en Instagram]({row['link_instagram']})", unsafe_allow_html=True)
    st.markdown("---")